/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddOrDeleteRoleToProfileModel } from '../models';
// @ts-ignore
import { AddOrDeleteUserToProfileModel } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { RoleProfileCreationModel } from '../models';
// @ts-ignore
import { RoleProfileEditionModel } from '../models';
// @ts-ignore
import { RoleProfileModel } from '../models';
// @ts-ignore
import { RoleProfileModelPaged } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * RoleProfileApi - axios parameter creator
 * @export
 */
export const RoleProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesGet: async (nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['DescriptionContains'] = descriptionContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesIdDelete: async (id: number, nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProfilesIdDelete', 'id', id)
            const localVarPath = `/api/Profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['DescriptionContains'] = descriptionContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesIdGet: async (id: number, nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProfilesIdGet', 'id', id)
            const localVarPath = `/api/Profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['DescriptionContains'] = descriptionContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesListGet: async (nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['DescriptionContains'] = descriptionContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleProfileCreationModel} [roleProfileCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesPost: async (roleProfileCreationModel?: RoleProfileCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleProfileCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {RoleProfileEditionModel} [roleProfileEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesPut: async (nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, roleProfileEditionModel?: RoleProfileEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (descriptionContains !== undefined) {
                localVarQueryParameter['DescriptionContains'] = descriptionContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleProfileEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddOrDeleteRoleToProfileModel} [addOrDeleteRoleToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesRoleDelete: async (addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles/Role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrDeleteRoleToProfileModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddOrDeleteRoleToProfileModel} [addOrDeleteRoleToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesRolePost: async (addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles/Role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrDeleteRoleToProfileModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddOrDeleteUserToProfileModel} [addOrDeleteUserToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesUserDelete: async (addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrDeleteUserToProfileModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddOrDeleteUserToProfileModel} [addOrDeleteUserToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesUserPost: async (addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Profiles/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrDeleteUserToProfileModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleProfileApi - functional programming interface
 * @export
 */
export const RoleProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesGet(nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleProfileModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesGet(nameContains, descriptionContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesIdDelete(id: number, nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesIdDelete(id, nameContains, descriptionContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesIdGet(id: number, nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesIdGet(id, nameContains, descriptionContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesListGet(nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleProfileModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesListGet(nameContains, descriptionContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RoleProfileCreationModel} [roleProfileCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesPost(roleProfileCreationModel?: RoleProfileCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesPost(roleProfileCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [descriptionContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {RoleProfileEditionModel} [roleProfileEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesPut(nameContains?: string, descriptionContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, roleProfileEditionModel?: RoleProfileEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesPut(nameContains, descriptionContains, status, page, items, orderBies, rawIncludes, roleProfileEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddOrDeleteRoleToProfileModel} [addOrDeleteRoleToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesRoleDelete(addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesRoleDelete(addOrDeleteRoleToProfileModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddOrDeleteRoleToProfileModel} [addOrDeleteRoleToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesRolePost(addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesRolePost(addOrDeleteRoleToProfileModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddOrDeleteUserToProfileModel} [addOrDeleteUserToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesUserDelete(addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesUserDelete(addOrDeleteUserToProfileModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddOrDeleteUserToProfileModel} [addOrDeleteUserToProfileModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProfilesUserPost(addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProfilesUserPost(addOrDeleteUserToProfileModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleProfileApi - factory interface
 * @export
 */
export const RoleProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleProfileApiApiProfilesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesGet(requestParameters: RoleProfileApiApiProfilesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleProfileModelPaged> {
            return localVarFp.apiProfilesGet(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesIdDelete(requestParameters: RoleProfileApiApiProfilesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProfilesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesIdGet(requestParameters: RoleProfileApiApiProfilesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<RoleProfileModel> {
            return localVarFp.apiProfilesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesListGet(requestParameters: RoleProfileApiApiProfilesListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<RoleProfileModel>> {
            return localVarFp.apiProfilesListGet(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesPost(requestParameters: RoleProfileApiApiProfilesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleProfileModel> {
            return localVarFp.apiProfilesPost(requestParameters.roleProfileCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesPut(requestParameters: RoleProfileApiApiProfilesPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleProfileModel> {
            return localVarFp.apiProfilesPut(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.roleProfileEditionModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesRoleDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesRoleDelete(requestParameters: RoleProfileApiApiProfilesRoleDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ErrorResponse> {
            return localVarFp.apiProfilesRoleDelete(requestParameters.addOrDeleteRoleToProfileModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesRolePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesRolePost(requestParameters: RoleProfileApiApiProfilesRolePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ErrorResponse> {
            return localVarFp.apiProfilesRolePost(requestParameters.addOrDeleteRoleToProfileModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesUserDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesUserDelete(requestParameters: RoleProfileApiApiProfilesUserDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ErrorResponse> {
            return localVarFp.apiProfilesUserDelete(requestParameters.addOrDeleteUserToProfileModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleProfileApiApiProfilesUserPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProfilesUserPost(requestParameters: RoleProfileApiApiProfilesUserPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ErrorResponse> {
            return localVarFp.apiProfilesUserPost(requestParameters.addOrDeleteUserToProfileModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProfilesGet operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesGetRequest
 */
export interface RoleProfileApiApiProfilesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly descriptionContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleProfileApiApiProfilesGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiProfilesIdDelete operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesIdDeleteRequest
 */
export interface RoleProfileApiApiProfilesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly descriptionContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleProfileApiApiProfilesIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiProfilesIdGet operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesIdGetRequest
 */
export interface RoleProfileApiApiProfilesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly descriptionContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleProfileApiApiProfilesIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiProfilesListGet operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesListGetRequest
 */
export interface RoleProfileApiApiProfilesListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly descriptionContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleProfileApiApiProfilesListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiProfilesPost operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesPostRequest
 */
export interface RoleProfileApiApiProfilesPostRequest {
    /**
     * 
     * @type {RoleProfileCreationModel}
     * @memberof RoleProfileApiApiProfilesPost
     */
    readonly roleProfileCreationModel?: RoleProfileCreationModel
}

/**
 * Request parameters for apiProfilesPut operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesPutRequest
 */
export interface RoleProfileApiApiProfilesPutRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly descriptionContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {RoleProfileEditionModel}
     * @memberof RoleProfileApiApiProfilesPut
     */
    readonly roleProfileEditionModel?: RoleProfileEditionModel
}

/**
 * Request parameters for apiProfilesRoleDelete operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesRoleDeleteRequest
 */
export interface RoleProfileApiApiProfilesRoleDeleteRequest {
    /**
     * 
     * @type {AddOrDeleteRoleToProfileModel}
     * @memberof RoleProfileApiApiProfilesRoleDelete
     */
    readonly addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel
}

/**
 * Request parameters for apiProfilesRolePost operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesRolePostRequest
 */
export interface RoleProfileApiApiProfilesRolePostRequest {
    /**
     * 
     * @type {AddOrDeleteRoleToProfileModel}
     * @memberof RoleProfileApiApiProfilesRolePost
     */
    readonly addOrDeleteRoleToProfileModel?: AddOrDeleteRoleToProfileModel
}

/**
 * Request parameters for apiProfilesUserDelete operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesUserDeleteRequest
 */
export interface RoleProfileApiApiProfilesUserDeleteRequest {
    /**
     * 
     * @type {AddOrDeleteUserToProfileModel}
     * @memberof RoleProfileApiApiProfilesUserDelete
     */
    readonly addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel
}

/**
 * Request parameters for apiProfilesUserPost operation in RoleProfileApi.
 * @export
 * @interface RoleProfileApiApiProfilesUserPostRequest
 */
export interface RoleProfileApiApiProfilesUserPostRequest {
    /**
     * 
     * @type {AddOrDeleteUserToProfileModel}
     * @memberof RoleProfileApiApiProfilesUserPost
     */
    readonly addOrDeleteUserToProfileModel?: AddOrDeleteUserToProfileModel
}

/**
 * RoleProfileApi - object-oriented interface
 * @export
 * @class RoleProfileApi
 * @extends {BaseAPI}
 */
export class RoleProfileApi extends BaseAPI {
    /**
     * 
     * @param {RoleProfileApiApiProfilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesGet(requestParameters: RoleProfileApiApiProfilesGetRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesGet(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesIdDelete(requestParameters: RoleProfileApiApiProfilesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesIdGet(requestParameters: RoleProfileApiApiProfilesIdGetRequest, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesListGet(requestParameters: RoleProfileApiApiProfilesListGetRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesListGet(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesPost(requestParameters: RoleProfileApiApiProfilesPostRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesPost(requestParameters.roleProfileCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesPut(requestParameters: RoleProfileApiApiProfilesPutRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesPut(requestParameters.nameContains, requestParameters.descriptionContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.roleProfileEditionModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesRoleDelete(requestParameters: RoleProfileApiApiProfilesRoleDeleteRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesRoleDelete(requestParameters.addOrDeleteRoleToProfileModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesRolePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesRolePost(requestParameters: RoleProfileApiApiProfilesRolePostRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesRolePost(requestParameters.addOrDeleteRoleToProfileModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesUserDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesUserDelete(requestParameters: RoleProfileApiApiProfilesUserDeleteRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesUserDelete(requestParameters.addOrDeleteUserToProfileModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleProfileApiApiProfilesUserPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleProfileApi
     */
    public apiProfilesUserPost(requestParameters: RoleProfileApiApiProfilesUserPostRequest = {}, options?: AxiosRequestConfig) {
        return RoleProfileApiFp(this.configuration).apiProfilesUserPost(requestParameters.addOrDeleteUserToProfileModel, options).then((request) => request(this.axios, this.basePath));
    }
}
