/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorLogStatus } from '../models';
// @ts-ignore
import { ErrorLogType } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { LocalErrorLogModel } from '../models';
// @ts-ignore
import { LocalErrorLogModelPaged } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * LocalErrorLogApi - axios parameter creator
 * @export
 */
export const LocalErrorLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsGet: async (id?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Logs/Errors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (processContains !== undefined) {
                localVarQueryParameter['ProcessContains'] = processContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [id2] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsIdGet: async (id: number, id2?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLogsErrorsIdGet', 'id', id)
            const localVarPath = `/api/Logs/Errors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id2 !== undefined) {
                localVarQueryParameter['Id'] = id2;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (processContains !== undefined) {
                localVarQueryParameter['ProcessContains'] = processContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsListGet: async (id?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Logs/Errors/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (processContains !== undefined) {
                localVarQueryParameter['ProcessContains'] = processContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalErrorLogApi - functional programming interface
 * @export
 */
export const LocalErrorLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalErrorLogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsErrorsGet(id?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalErrorLogModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsErrorsGet(id, idList, status, statusList, type, processContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [id2] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsErrorsIdGet(id: number, id2?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalErrorLogModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsErrorsIdGet(id, id2, idList, status, statusList, type, processContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {ErrorLogStatus} [status] 
         * @param {Array<ErrorLogStatus>} [statusList] 
         * @param {ErrorLogType} [type] 
         * @param {string} [processContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsErrorsListGet(id?: number, idList?: Array<number>, status?: ErrorLogStatus, statusList?: Array<ErrorLogStatus>, type?: ErrorLogType, processContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocalErrorLogModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsErrorsListGet(id, idList, status, statusList, type, processContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalErrorLogApi - factory interface
 * @export
 */
export const LocalErrorLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalErrorLogApiFp(configuration)
    return {
        /**
         * 
         * @param {LocalErrorLogApiApiLogsErrorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsGet(requestParameters: LocalErrorLogApiApiLogsErrorsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LocalErrorLogModelPaged> {
            return localVarFp.apiLogsErrorsGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocalErrorLogApiApiLogsErrorsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsIdGet(requestParameters: LocalErrorLogApiApiLogsErrorsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<LocalErrorLogModel> {
            return localVarFp.apiLogsErrorsIdGet(requestParameters.id, requestParameters.id2, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocalErrorLogApiApiLogsErrorsListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsErrorsListGet(requestParameters: LocalErrorLogApiApiLogsErrorsListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<LocalErrorLogModel>> {
            return localVarFp.apiLogsErrorsListGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiLogsErrorsGet operation in LocalErrorLogApi.
 * @export
 * @interface LocalErrorLogApiApiLogsErrorsGetRequest
 */
export interface LocalErrorLogApiApiLogsErrorsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly id?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {ErrorLogStatus}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly status?: ErrorLogStatus

    /**
     * 
     * @type {Array<ErrorLogStatus>}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly statusList?: Array<ErrorLogStatus>

    /**
     * 
     * @type {ErrorLogType}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly type?: ErrorLogType

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly processContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalErrorLogApiApiLogsErrorsGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiLogsErrorsIdGet operation in LocalErrorLogApi.
 * @export
 * @interface LocalErrorLogApiApiLogsErrorsIdGetRequest
 */
export interface LocalErrorLogApiApiLogsErrorsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly id2?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {ErrorLogStatus}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly status?: ErrorLogStatus

    /**
     * 
     * @type {Array<ErrorLogStatus>}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly statusList?: Array<ErrorLogStatus>

    /**
     * 
     * @type {ErrorLogType}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly type?: ErrorLogType

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly processContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalErrorLogApiApiLogsErrorsIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiLogsErrorsListGet operation in LocalErrorLogApi.
 * @export
 * @interface LocalErrorLogApiApiLogsErrorsListGetRequest
 */
export interface LocalErrorLogApiApiLogsErrorsListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly id?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {ErrorLogStatus}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly status?: ErrorLogStatus

    /**
     * 
     * @type {Array<ErrorLogStatus>}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly statusList?: Array<ErrorLogStatus>

    /**
     * 
     * @type {ErrorLogType}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly type?: ErrorLogType

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly processContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalErrorLogApiApiLogsErrorsListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * LocalErrorLogApi - object-oriented interface
 * @export
 * @class LocalErrorLogApi
 * @extends {BaseAPI}
 */
export class LocalErrorLogApi extends BaseAPI {
    /**
     * 
     * @param {LocalErrorLogApiApiLogsErrorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalErrorLogApi
     */
    public apiLogsErrorsGet(requestParameters: LocalErrorLogApiApiLogsErrorsGetRequest = {}, options?: AxiosRequestConfig) {
        return LocalErrorLogApiFp(this.configuration).apiLogsErrorsGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocalErrorLogApiApiLogsErrorsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalErrorLogApi
     */
    public apiLogsErrorsIdGet(requestParameters: LocalErrorLogApiApiLogsErrorsIdGetRequest, options?: AxiosRequestConfig) {
        return LocalErrorLogApiFp(this.configuration).apiLogsErrorsIdGet(requestParameters.id, requestParameters.id2, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocalErrorLogApiApiLogsErrorsListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalErrorLogApi
     */
    public apiLogsErrorsListGet(requestParameters: LocalErrorLogApiApiLogsErrorsListGetRequest = {}, options?: AxiosRequestConfig) {
        return LocalErrorLogApiFp(this.configuration).apiLogsErrorsListGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.type, requestParameters.processContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }
}
