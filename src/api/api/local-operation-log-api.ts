/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { LocalOperationLogModel } from '../models';
// @ts-ignore
import { LocalOperationLogModelPaged } from '../models';
// @ts-ignore
import { OperationLogStatus } from '../models';
// @ts-ignore
import { OperationLogType } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * LocalOperationLogApi - axios parameter creator
 * @export
 */
export const LocalOperationLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsGet: async (id?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Logs/Operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (identifierContains !== undefined) {
                localVarQueryParameter['IdentifierContains'] = identifierContains;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (inputContains !== undefined) {
                localVarQueryParameter['InputContains'] = inputContains;
            }

            if (resultContains !== undefined) {
                localVarQueryParameter['ResultContains'] = resultContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [id2] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsIdGet: async (id: number, id2?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLogsOperationsIdGet', 'id', id)
            const localVarPath = `/api/Logs/Operations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id2 !== undefined) {
                localVarQueryParameter['Id'] = id2;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (identifierContains !== undefined) {
                localVarQueryParameter['IdentifierContains'] = identifierContains;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (inputContains !== undefined) {
                localVarQueryParameter['InputContains'] = inputContains;
            }

            if (resultContains !== undefined) {
                localVarQueryParameter['ResultContains'] = resultContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsListGet: async (id?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Logs/Operations/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (identifierContains !== undefined) {
                localVarQueryParameter['IdentifierContains'] = identifierContains;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (inputContains !== undefined) {
                localVarQueryParameter['InputContains'] = inputContains;
            }

            if (resultContains !== undefined) {
                localVarQueryParameter['ResultContains'] = resultContains;
            }

            if (userIdentifierContains !== undefined) {
                localVarQueryParameter['UserIdentifierContains'] = userIdentifierContains;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalOperationLogApi - functional programming interface
 * @export
 */
export const LocalOperationLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalOperationLogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsOperationsGet(id?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalOperationLogModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsOperationsGet(id, idList, status, statusList, identifierContains, type, inputContains, resultContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [id2] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsOperationsIdGet(id: number, id2?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalOperationLogModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsOperationsIdGet(id, id2, idList, status, statusList, identifierContains, type, inputContains, resultContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {Array<number>} [idList] 
         * @param {OperationLogStatus} [status] 
         * @param {Array<OperationLogStatus>} [statusList] 
         * @param {string} [identifierContains] 
         * @param {OperationLogType} [type] 
         * @param {string} [inputContains] 
         * @param {string} [resultContains] 
         * @param {string} [userIdentifierContains] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogsOperationsListGet(id?: number, idList?: Array<number>, status?: OperationLogStatus, statusList?: Array<OperationLogStatus>, identifierContains?: string, type?: OperationLogType, inputContains?: string, resultContains?: string, userIdentifierContains?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocalOperationLogModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogsOperationsListGet(id, idList, status, statusList, identifierContains, type, inputContains, resultContains, userIdentifierContains, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalOperationLogApi - factory interface
 * @export
 */
export const LocalOperationLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalOperationLogApiFp(configuration)
    return {
        /**
         * 
         * @param {LocalOperationLogApiApiLogsOperationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsGet(requestParameters: LocalOperationLogApiApiLogsOperationsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<LocalOperationLogModelPaged> {
            return localVarFp.apiLogsOperationsGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocalOperationLogApiApiLogsOperationsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsIdGet(requestParameters: LocalOperationLogApiApiLogsOperationsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<LocalOperationLogModel> {
            return localVarFp.apiLogsOperationsIdGet(requestParameters.id, requestParameters.id2, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocalOperationLogApiApiLogsOperationsListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogsOperationsListGet(requestParameters: LocalOperationLogApiApiLogsOperationsListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<LocalOperationLogModel>> {
            return localVarFp.apiLogsOperationsListGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiLogsOperationsGet operation in LocalOperationLogApi.
 * @export
 * @interface LocalOperationLogApiApiLogsOperationsGetRequest
 */
export interface LocalOperationLogApiApiLogsOperationsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly id?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {OperationLogStatus}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly status?: OperationLogStatus

    /**
     * 
     * @type {Array<OperationLogStatus>}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly statusList?: Array<OperationLogStatus>

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly identifierContains?: string

    /**
     * 
     * @type {OperationLogType}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly type?: OperationLogType

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly inputContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly resultContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalOperationLogApiApiLogsOperationsGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiLogsOperationsIdGet operation in LocalOperationLogApi.
 * @export
 * @interface LocalOperationLogApiApiLogsOperationsIdGetRequest
 */
export interface LocalOperationLogApiApiLogsOperationsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly id2?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {OperationLogStatus}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly status?: OperationLogStatus

    /**
     * 
     * @type {Array<OperationLogStatus>}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly statusList?: Array<OperationLogStatus>

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly identifierContains?: string

    /**
     * 
     * @type {OperationLogType}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly type?: OperationLogType

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly inputContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly resultContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalOperationLogApiApiLogsOperationsIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiLogsOperationsListGet operation in LocalOperationLogApi.
 * @export
 * @interface LocalOperationLogApiApiLogsOperationsListGetRequest
 */
export interface LocalOperationLogApiApiLogsOperationsListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly id?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {OperationLogStatus}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly status?: OperationLogStatus

    /**
     * 
     * @type {Array<OperationLogStatus>}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly statusList?: Array<OperationLogStatus>

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly identifierContains?: string

    /**
     * 
     * @type {OperationLogType}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly type?: OperationLogType

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly inputContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly resultContains?: string

    /**
     * 
     * @type {string}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly userIdentifierContains?: string

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocalOperationLogApiApiLogsOperationsListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * LocalOperationLogApi - object-oriented interface
 * @export
 * @class LocalOperationLogApi
 * @extends {BaseAPI}
 */
export class LocalOperationLogApi extends BaseAPI {
    /**
     * 
     * @param {LocalOperationLogApiApiLogsOperationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalOperationLogApi
     */
    public apiLogsOperationsGet(requestParameters: LocalOperationLogApiApiLogsOperationsGetRequest = {}, options?: AxiosRequestConfig) {
        return LocalOperationLogApiFp(this.configuration).apiLogsOperationsGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocalOperationLogApiApiLogsOperationsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalOperationLogApi
     */
    public apiLogsOperationsIdGet(requestParameters: LocalOperationLogApiApiLogsOperationsIdGetRequest, options?: AxiosRequestConfig) {
        return LocalOperationLogApiFp(this.configuration).apiLogsOperationsIdGet(requestParameters.id, requestParameters.id2, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocalOperationLogApiApiLogsOperationsListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalOperationLogApi
     */
    public apiLogsOperationsListGet(requestParameters: LocalOperationLogApiApiLogsOperationsListGetRequest = {}, options?: AxiosRequestConfig) {
        return LocalOperationLogApiFp(this.configuration).apiLogsOperationsListGet(requestParameters.id, requestParameters.idList, requestParameters.status, requestParameters.statusList, requestParameters.identifierContains, requestParameters.type, requestParameters.inputContains, requestParameters.resultContains, requestParameters.userIdentifierContains, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }
}
