/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessCreationModel } from '../models';
// @ts-ignore
import { BusinessEditionModel } from '../models';
// @ts-ignore
import { BusinessIdentificationType } from '../models';
// @ts-ignore
import { BusinessModel } from '../models';
// @ts-ignore
import { BusinessModelPaged } from '../models';
// @ts-ignore
import { BusinessType } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * BusinessApi - axios parameter creator
 * @export
 */
export const BusinessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesGet: async (nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (ownerIdList) {
                localVarQueryParameter['OwnerIdList'] = ownerIdList;
            }

            if (idOrOwnerId !== undefined) {
                localVarQueryParameter['IdOrOwnerId'] = idOrOwnerId;
            }

            if (idOrOwnerIdList) {
                localVarQueryParameter['IdOrOwnerIdList'] = idOrOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesIdDelete: async (id: number, nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesIdDelete', 'id', id)
            const localVarPath = `/api/Businesses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (ownerIdList) {
                localVarQueryParameter['OwnerIdList'] = ownerIdList;
            }

            if (idOrOwnerId !== undefined) {
                localVarQueryParameter['IdOrOwnerId'] = idOrOwnerId;
            }

            if (idOrOwnerIdList) {
                localVarQueryParameter['IdOrOwnerIdList'] = idOrOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesIdGet: async (id: number, nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesIdGet', 'id', id)
            const localVarPath = `/api/Businesses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (ownerIdList) {
                localVarQueryParameter['OwnerIdList'] = ownerIdList;
            }

            if (idOrOwnerId !== undefined) {
                localVarQueryParameter['IdOrOwnerId'] = idOrOwnerId;
            }

            if (idOrOwnerIdList) {
                localVarQueryParameter['IdOrOwnerIdList'] = idOrOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesListGet: async (nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (ownerIdList) {
                localVarQueryParameter['OwnerIdList'] = ownerIdList;
            }

            if (idOrOwnerId !== undefined) {
                localVarQueryParameter['IdOrOwnerId'] = idOrOwnerId;
            }

            if (idOrOwnerIdList) {
                localVarQueryParameter['IdOrOwnerIdList'] = idOrOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BusinessCreationModel} [businessCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesPost: async (businessCreationModel?: BusinessCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessEditionModel} [businessEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesPut: async (nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessEditionModel?: BusinessEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['OwnerId'] = ownerId;
            }

            if (ownerIdList) {
                localVarQueryParameter['OwnerIdList'] = ownerIdList;
            }

            if (idOrOwnerId !== undefined) {
                localVarQueryParameter['IdOrOwnerId'] = idOrOwnerId;
            }

            if (idOrOwnerIdList) {
                localVarQueryParameter['IdOrOwnerIdList'] = idOrOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessApi - functional programming interface
 * @export
 */
export const BusinessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesGet(nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesGet(nameContains, code, identificationType, identificationContains, idList, type, status, ownerId, ownerIdList, idOrOwnerId, idOrOwnerIdList, responsibleUserId, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesIdDelete(id: number, nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesIdDelete(id, nameContains, code, identificationType, identificationContains, idList, type, status, ownerId, ownerIdList, idOrOwnerId, idOrOwnerIdList, responsibleUserId, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesIdGet(id: number, nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesIdGet(id, nameContains, code, identificationType, identificationContains, idList, type, status, ownerId, ownerIdList, idOrOwnerId, idOrOwnerIdList, responsibleUserId, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesListGet(nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesListGet(nameContains, code, identificationType, identificationContains, idList, type, status, ownerId, ownerIdList, idOrOwnerId, idOrOwnerIdList, responsibleUserId, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BusinessCreationModel} [businessCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesPost(businessCreationModel?: BusinessCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesPost(businessCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {string} [code] 
         * @param {BusinessIdentificationType} [identificationType] 
         * @param {string} [identificationContains] 
         * @param {Array<number>} [idList] 
         * @param {BusinessType} [type] 
         * @param {Status} [status] 
         * @param {number} [ownerId] 
         * @param {Array<number>} [ownerIdList] 
         * @param {number} [idOrOwnerId] 
         * @param {Array<number>} [idOrOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessEditionModel} [businessEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesPut(nameContains?: string, code?: string, identificationType?: BusinessIdentificationType, identificationContains?: string, idList?: Array<number>, type?: BusinessType, status?: Status, ownerId?: number, ownerIdList?: Array<number>, idOrOwnerId?: number, idOrOwnerIdList?: Array<number>, responsibleUserId?: string, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessEditionModel?: BusinessEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesPut(nameContains, code, identificationType, identificationContains, idList, type, status, ownerId, ownerIdList, idOrOwnerId, idOrOwnerIdList, responsibleUserId, page, items, orderBies, rawIncludes, businessEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessApi - factory interface
 * @export
 */
export const BusinessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessApiFp(configuration)
    return {
        /**
         * 
         * @param {BusinessApiApiBusinessesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesGet(requestParameters: BusinessApiApiBusinessesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessModelPaged> {
            return localVarFp.apiBusinessesGet(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiApiBusinessesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesIdDelete(requestParameters: BusinessApiApiBusinessesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBusinessesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiApiBusinessesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesIdGet(requestParameters: BusinessApiApiBusinessesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessModel> {
            return localVarFp.apiBusinessesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiApiBusinessesListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesListGet(requestParameters: BusinessApiApiBusinessesListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<BusinessModel>> {
            return localVarFp.apiBusinessesListGet(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiApiBusinessesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesPost(requestParameters: BusinessApiApiBusinessesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessModel> {
            return localVarFp.apiBusinessesPost(requestParameters.businessCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessApiApiBusinessesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesPut(requestParameters: BusinessApiApiBusinessesPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessModel> {
            return localVarFp.apiBusinessesPut(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBusinessesGet operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesGetRequest
 */
export interface BusinessApiApiBusinessesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly code?: string

    /**
     * 
     * @type {BusinessIdentificationType}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly identificationType?: BusinessIdentificationType

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly type?: BusinessType

    /**
     * 
     * @type {Status}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly ownerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly ownerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly idOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly idOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessApiApiBusinessesGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesIdDelete operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesIdDeleteRequest
 */
export interface BusinessApiApiBusinessesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly code?: string

    /**
     * 
     * @type {BusinessIdentificationType}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly identificationType?: BusinessIdentificationType

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly type?: BusinessType

    /**
     * 
     * @type {Status}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly ownerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly ownerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly idOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly idOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessApiApiBusinessesIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesIdGet operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesIdGetRequest
 */
export interface BusinessApiApiBusinessesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly code?: string

    /**
     * 
     * @type {BusinessIdentificationType}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly identificationType?: BusinessIdentificationType

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly type?: BusinessType

    /**
     * 
     * @type {Status}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly ownerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly ownerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly idOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly idOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessApiApiBusinessesIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesListGet operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesListGetRequest
 */
export interface BusinessApiApiBusinessesListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly code?: string

    /**
     * 
     * @type {BusinessIdentificationType}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly identificationType?: BusinessIdentificationType

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly type?: BusinessType

    /**
     * 
     * @type {Status}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly ownerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly ownerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly idOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly idOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessApiApiBusinessesListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesPost operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesPostRequest
 */
export interface BusinessApiApiBusinessesPostRequest {
    /**
     * 
     * @type {BusinessCreationModel}
     * @memberof BusinessApiApiBusinessesPost
     */
    readonly businessCreationModel?: BusinessCreationModel
}

/**
 * Request parameters for apiBusinessesPut operation in BusinessApi.
 * @export
 * @interface BusinessApiApiBusinessesPutRequest
 */
export interface BusinessApiApiBusinessesPutRequest {
    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly nameContains?: string

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly code?: string

    /**
     * 
     * @type {BusinessIdentificationType}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly identificationType?: BusinessIdentificationType

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly type?: BusinessType

    /**
     * 
     * @type {Status}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly ownerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly ownerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly idOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly idOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {BusinessEditionModel}
     * @memberof BusinessApiApiBusinessesPut
     */
    readonly businessEditionModel?: BusinessEditionModel
}

/**
 * BusinessApi - object-oriented interface
 * @export
 * @class BusinessApi
 * @extends {BaseAPI}
 */
export class BusinessApi extends BaseAPI {
    /**
     * 
     * @param {BusinessApiApiBusinessesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesGet(requestParameters: BusinessApiApiBusinessesGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesGet(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiApiBusinessesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesIdDelete(requestParameters: BusinessApiApiBusinessesIdDeleteRequest, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiApiBusinessesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesIdGet(requestParameters: BusinessApiApiBusinessesIdGetRequest, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiApiBusinessesListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesListGet(requestParameters: BusinessApiApiBusinessesListGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesListGet(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiApiBusinessesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesPost(requestParameters: BusinessApiApiBusinessesPostRequest = {}, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesPost(requestParameters.businessCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessApiApiBusinessesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public apiBusinessesPut(requestParameters: BusinessApiApiBusinessesPutRequest = {}, options?: AxiosRequestConfig) {
        return BusinessApiFp(this.configuration).apiBusinessesPut(requestParameters.nameContains, requestParameters.code, requestParameters.identificationType, requestParameters.identificationContains, requestParameters.idList, requestParameters.type, requestParameters.status, requestParameters.ownerId, requestParameters.ownerIdList, requestParameters.idOrOwnerId, requestParameters.idOrOwnerIdList, requestParameters.responsibleUserId, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
