/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessUserType } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { UserChangePasswordModel } from '../models';
// @ts-ignore
import { UserCreationModel } from '../models';
// @ts-ignore
import { UserEditionModel } from '../models';
// @ts-ignore
import { UserModel } from '../models';
// @ts-ignore
import { UserModelPaged } from '../models';
// @ts-ignore
import { UserType } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserChangePasswordModel} [userChangePasswordModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersChangePasswordPut: async (userChangePasswordModel?: UserChangePasswordModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userChangePasswordModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (businessUserType !== undefined) {
                localVarQueryParameter['BusinessUserType'] = businessUserType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete: async (id: string, idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdDelete', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (businessUserType !== undefined) {
                localVarQueryParameter['BusinessUserType'] = businessUserType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: string, idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (businessUserType !== undefined) {
                localVarQueryParameter['BusinessUserType'] = businessUserType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersListGet: async (idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (businessUserType !== undefined) {
                localVarQueryParameter['BusinessUserType'] = businessUserType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreationModel} [userCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (userCreationModel?: UserCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {UserEditionModel} [userEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut: async (idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, userEditionModel?: UserEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (businessUserType !== undefined) {
                localVarQueryParameter['BusinessUserType'] = businessUserType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserChangePasswordModel} [userChangePasswordModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersChangePasswordPut(userChangePasswordModel?: UserChangePasswordModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersChangePasswordPut(userChangePasswordModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(idList, firstNameContains, firstLastNameContains, businessId, businessIdList, type, businessUserType, status, businessOwnerId, businessOwnerIdList, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdDelete(id: string, idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdDelete(id, idList, firstNameContains, firstLastNameContains, businessId, businessIdList, type, businessUserType, status, businessOwnerId, businessOwnerIdList, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: string, idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, idList, firstNameContains, firstLastNameContains, businessId, businessIdList, type, businessUserType, status, businessOwnerId, businessOwnerIdList, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersListGet(idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersListGet(idList, firstNameContains, firstLastNameContains, businessId, businessIdList, type, businessUserType, status, businessOwnerId, businessOwnerIdList, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserCreationModel} [userCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(userCreationModel?: UserCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(userCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [idList] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserType} [type] 
         * @param {BusinessUserType} [businessUserType] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {UserEditionModel} [userEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPut(idList?: Array<string>, firstNameContains?: string, firstLastNameContains?: string, businessId?: number, businessIdList?: Array<number>, type?: UserType, businessUserType?: BusinessUserType, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, userEditionModel?: UserEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPut(idList, firstNameContains, firstLastNameContains, businessId, businessIdList, type, businessUserType, status, businessOwnerId, businessOwnerIdList, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, userEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserApiApiUsersChangePasswordPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersChangePasswordPut(requestParameters: UserApiApiUsersChangePasswordPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersChangePasswordPut(requestParameters.userChangePasswordModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(requestParameters: UserApiApiUsersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserModelPaged> {
            return localVarFp.apiUsersGet(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete(requestParameters: UserApiApiUsersIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdDelete(requestParameters.id, requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(requestParameters: UserApiApiUsersIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UserModel> {
            return localVarFp.apiUsersIdGet(requestParameters.id, requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersListGet(requestParameters: UserApiApiUsersListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<UserModel>> {
            return localVarFp.apiUsersListGet(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(requestParameters: UserApiApiUsersPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserModel> {
            return localVarFp.apiUsersPost(requestParameters.userCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiApiUsersPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPut(requestParameters: UserApiApiUsersPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserModel> {
            return localVarFp.apiUsersPut(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.userEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUsersChangePasswordPut operation in UserApi.
 * @export
 * @interface UserApiApiUsersChangePasswordPutRequest
 */
export interface UserApiApiUsersChangePasswordPutRequest {
    /**
     * 
     * @type {UserChangePasswordModel}
     * @memberof UserApiApiUsersChangePasswordPut
     */
    readonly userChangePasswordModel?: UserChangePasswordModel
}

/**
 * Request parameters for apiUsersGet operation in UserApi.
 * @export
 * @interface UserApiApiUsersGetRequest
 */
export interface UserApiApiUsersGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersGet
     */
    readonly idList?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserType}
     * @memberof UserApiApiUsersGet
     */
    readonly type?: UserType

    /**
     * 
     * @type {BusinessUserType}
     * @memberof UserApiApiUsersGet
     */
    readonly businessUserType?: BusinessUserType

    /**
     * 
     * @type {Status}
     * @memberof UserApiApiUsersGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserApiApiUsersGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiUsersIdDelete operation in UserApi.
 * @export
 * @interface UserApiApiUsersIdDeleteRequest
 */
export interface UserApiApiUsersIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly id: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly idList?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserType}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly type?: UserType

    /**
     * 
     * @type {BusinessUserType}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessUserType?: BusinessUserType

    /**
     * 
     * @type {Status}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiUsersIdGet operation in UserApi.
 * @export
 * @interface UserApiApiUsersIdGetRequest
 */
export interface UserApiApiUsersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdGet
     */
    readonly id: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly idList?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersIdGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserType}
     * @memberof UserApiApiUsersIdGet
     */
    readonly type?: UserType

    /**
     * 
     * @type {BusinessUserType}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessUserType?: BusinessUserType

    /**
     * 
     * @type {Status}
     * @memberof UserApiApiUsersIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiUsersListGet operation in UserApi.
 * @export
 * @interface UserApiApiUsersListGetRequest
 */
export interface UserApiApiUsersListGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersListGet
     */
    readonly idList?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersListGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersListGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserType}
     * @memberof UserApiApiUsersListGet
     */
    readonly type?: UserType

    /**
     * 
     * @type {BusinessUserType}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessUserType?: BusinessUserType

    /**
     * 
     * @type {Status}
     * @memberof UserApiApiUsersListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersListGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserApiApiUsersListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiUsersPost operation in UserApi.
 * @export
 * @interface UserApiApiUsersPostRequest
 */
export interface UserApiApiUsersPostRequest {
    /**
     * 
     * @type {UserCreationModel}
     * @memberof UserApiApiUsersPost
     */
    readonly userCreationModel?: UserCreationModel
}

/**
 * Request parameters for apiUsersPut operation in UserApi.
 * @export
 * @interface UserApiApiUsersPutRequest
 */
export interface UserApiApiUsersPutRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersPut
     */
    readonly idList?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersPut
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiApiUsersPut
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersPut
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersPut
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserType}
     * @memberof UserApiApiUsersPut
     */
    readonly type?: UserType

    /**
     * 
     * @type {BusinessUserType}
     * @memberof UserApiApiUsersPut
     */
    readonly businessUserType?: BusinessUserType

    /**
     * 
     * @type {Status}
     * @memberof UserApiApiUsersPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersPut
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersPut
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersPut
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserApiApiUsersPut
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiApiUsersPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserApiApiUsersPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserApiApiUsersPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {UserEditionModel}
     * @memberof UserApiApiUsersPut
     */
    readonly userEditionModel?: UserEditionModel
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiApiUsersChangePasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersChangePasswordPut(requestParameters: UserApiApiUsersChangePasswordPutRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersChangePasswordPut(requestParameters.userChangePasswordModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersGet(requestParameters: UserApiApiUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersGet(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdDelete(requestParameters: UserApiApiUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdDelete(requestParameters.id, requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdGet(requestParameters: UserApiApiUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdGet(requestParameters.id, requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersListGet(requestParameters: UserApiApiUsersListGetRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersListGet(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersPost(requestParameters: UserApiApiUsersPostRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersPost(requestParameters.userCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiApiUsersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersPut(requestParameters: UserApiApiUsersPutRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersPut(requestParameters.idList, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.type, requestParameters.businessUserType, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.userEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
