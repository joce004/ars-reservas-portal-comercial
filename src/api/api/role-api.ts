/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { RoleCreationModel } from '../models';
// @ts-ignore
import { RoleEditionModel } from '../models';
// @ts-ignore
import { RoleModel } from '../models';
// @ts-ignore
import { RoleModelPaged } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesGet: async (nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesIdDelete: async (id: string, nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRolesIdDelete', 'id', id)
            const localVarPath = `/api/Roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesIdGet: async (id: string, nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRolesIdGet', 'id', id)
            const localVarPath = `/api/Roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesListGet: async (nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Roles/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RoleCreationModel} [roleCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesPost: async (roleCreationModel?: RoleCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {RoleEditionModel} [roleEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesPut: async (nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, roleEditionModel?: RoleEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesGet(nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesGet(nameContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesIdDelete(id: string, nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesIdDelete(id, nameContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesIdGet(id: string, nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesIdGet(id, nameContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesListGet(nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesListGet(nameContains, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RoleCreationModel} [roleCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesPost(roleCreationModel?: RoleCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesPost(roleCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {RoleEditionModel} [roleEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRolesPut(nameContains?: string, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, roleEditionModel?: RoleEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRolesPut(nameContains, status, page, items, orderBies, rawIncludes, roleEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleApiApiRolesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesGet(requestParameters: RoleApiApiRolesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleModelPaged> {
            return localVarFp.apiRolesGet(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiApiRolesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesIdDelete(requestParameters: RoleApiApiRolesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiRolesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiApiRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesIdGet(requestParameters: RoleApiApiRolesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<RoleModel> {
            return localVarFp.apiRolesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiApiRolesListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesListGet(requestParameters: RoleApiApiRolesListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<RoleModel>> {
            return localVarFp.apiRolesListGet(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiApiRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesPost(requestParameters: RoleApiApiRolesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleModel> {
            return localVarFp.apiRolesPost(requestParameters.roleCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiApiRolesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRolesPut(requestParameters: RoleApiApiRolesPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RoleModel> {
            return localVarFp.apiRolesPut(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.roleEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiRolesGet operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesGetRequest
 */
export interface RoleApiApiRolesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleApiApiRolesGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleApiApiRolesGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleApiApiRolesGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiRolesIdDelete operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesIdDeleteRequest
 */
export interface RoleApiApiRolesIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly nameContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleApiApiRolesIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiRolesIdGet operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesIdGetRequest
 */
export interface RoleApiApiRolesIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleApiApiRolesIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiRolesListGet operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesListGetRequest
 */
export interface RoleApiApiRolesListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesListGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleApiApiRolesListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleApiApiRolesListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleApiApiRolesListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiRolesPost operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesPostRequest
 */
export interface RoleApiApiRolesPostRequest {
    /**
     * 
     * @type {RoleCreationModel}
     * @memberof RoleApiApiRolesPost
     */
    readonly roleCreationModel?: RoleCreationModel
}

/**
 * Request parameters for apiRolesPut operation in RoleApi.
 * @export
 * @interface RoleApiApiRolesPutRequest
 */
export interface RoleApiApiRolesPutRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiApiRolesPut
     */
    readonly nameContains?: string

    /**
     * 
     * @type {Status}
     * @memberof RoleApiApiRolesPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiApiRolesPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof RoleApiApiRolesPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof RoleApiApiRolesPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {RoleEditionModel}
     * @memberof RoleApiApiRolesPut
     */
    readonly roleEditionModel?: RoleEditionModel
}

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {RoleApiApiRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesGet(requestParameters: RoleApiApiRolesGetRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesGet(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiApiRolesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesIdDelete(requestParameters: RoleApiApiRolesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiApiRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesIdGet(requestParameters: RoleApiApiRolesIdGetRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiApiRolesListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesListGet(requestParameters: RoleApiApiRolesListGetRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesListGet(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiApiRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesPost(requestParameters: RoleApiApiRolesPostRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesPost(requestParameters.roleCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiApiRolesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiRolesPut(requestParameters: RoleApiApiRolesPutRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiRolesPut(requestParameters.nameContains, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.roleEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
