/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessServiceRequestTypeVisibility } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { ServiceRequestClientIdentificationType } from '../models';
// @ts-ignore
import { ServiceRequestCreationModel } from '../models';
// @ts-ignore
import { ServiceRequestEditionModel } from '../models';
// @ts-ignore
import { ServiceRequestModel } from '../models';
// @ts-ignore
import { ServiceRequestModelPaged } from '../models';
// @ts-ignore
import { ServiceRequestStatus } from '../models';
// @ts-ignore
import { ServiceRequestStatusChangeModel } from '../models';
/**
 * ServiceRequestApi - axios parameter creator
 * @export
 */
export const ServiceRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsGet: async (idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (typeIdList) {
                localVarQueryParameter['TypeIdList'] = typeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (fullNameContains !== undefined) {
                localVarQueryParameter['FullNameContains'] = fullNameContains;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (secondNameContains !== undefined) {
                localVarQueryParameter['SecondNameContains'] = secondNameContains;
            }

            if (secondLastNameContains !== undefined) {
                localVarQueryParameter['SecondLastNameContains'] = secondLastNameContains;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsIdDelete: async (id: number, idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiServiceRequestsIdDelete', 'id', id)
            const localVarPath = `/api/ServiceRequests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (typeIdList) {
                localVarQueryParameter['TypeIdList'] = typeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (fullNameContains !== undefined) {
                localVarQueryParameter['FullNameContains'] = fullNameContains;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (secondNameContains !== undefined) {
                localVarQueryParameter['SecondNameContains'] = secondNameContains;
            }

            if (secondLastNameContains !== undefined) {
                localVarQueryParameter['SecondLastNameContains'] = secondLastNameContains;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsIdGet: async (id: number, idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiServiceRequestsIdGet', 'id', id)
            const localVarPath = `/api/ServiceRequests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (typeIdList) {
                localVarQueryParameter['TypeIdList'] = typeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (fullNameContains !== undefined) {
                localVarQueryParameter['FullNameContains'] = fullNameContains;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (secondNameContains !== undefined) {
                localVarQueryParameter['SecondNameContains'] = secondNameContains;
            }

            if (secondLastNameContains !== undefined) {
                localVarQueryParameter['SecondLastNameContains'] = secondLastNameContains;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsListGet: async (idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequests/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (typeIdList) {
                localVarQueryParameter['TypeIdList'] = typeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (fullNameContains !== undefined) {
                localVarQueryParameter['FullNameContains'] = fullNameContains;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (secondNameContains !== undefined) {
                localVarQueryParameter['SecondNameContains'] = secondNameContains;
            }

            if (secondLastNameContains !== undefined) {
                localVarQueryParameter['SecondLastNameContains'] = secondLastNameContains;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ServiceRequestCreationModel} [serviceRequestCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsPost: async (serviceRequestCreationModel?: ServiceRequestCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceRequestCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {ServiceRequestEditionModel} [serviceRequestEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsPut: async (idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, serviceRequestEditionModel?: ServiceRequestEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idList) {
                localVarQueryParameter['IdList'] = idList;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (typeIdList) {
                localVarQueryParameter['TypeIdList'] = typeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (fullNameContains !== undefined) {
                localVarQueryParameter['FullNameContains'] = fullNameContains;
            }

            if (firstNameContains !== undefined) {
                localVarQueryParameter['FirstNameContains'] = firstNameContains;
            }

            if (firstLastNameContains !== undefined) {
                localVarQueryParameter['FirstLastNameContains'] = firstLastNameContains;
            }

            if (secondNameContains !== undefined) {
                localVarQueryParameter['SecondNameContains'] = secondNameContains;
            }

            if (secondLastNameContains !== undefined) {
                localVarQueryParameter['SecondLastNameContains'] = secondLastNameContains;
            }

            if (identificationContains !== undefined) {
                localVarQueryParameter['IdentificationContains'] = identificationContains;
            }

            if (identificationType !== undefined) {
                localVarQueryParameter['IdentificationType'] = identificationType;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceRequestEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ServiceRequestStatusChangeModel} [serviceRequestStatusChangeModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsStatusPut: async (serviceRequestStatusChangeModel?: ServiceRequestStatusChangeModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequests/Status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceRequestStatusChangeModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceRequestApi - functional programming interface
 * @export
 */
export const ServiceRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsGet(idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsGet(idList, typeId, typeIdList, visibility, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, fullNameContains, firstNameContains, firstLastNameContains, secondNameContains, secondLastNameContains, identificationContains, identificationType, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsIdDelete(id: number, idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsIdDelete(id, idList, typeId, typeIdList, visibility, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, fullNameContains, firstNameContains, firstLastNameContains, secondNameContains, secondLastNameContains, identificationContains, identificationType, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsIdGet(id: number, idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsIdGet(id, idList, typeId, typeIdList, visibility, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, fullNameContains, firstNameContains, firstLastNameContains, secondNameContains, secondLastNameContains, identificationContains, identificationType, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsListGet(idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceRequestModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsListGet(idList, typeId, typeIdList, visibility, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, fullNameContains, firstNameContains, firstLastNameContains, secondNameContains, secondLastNameContains, identificationContains, identificationType, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ServiceRequestCreationModel} [serviceRequestCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsPost(serviceRequestCreationModel?: ServiceRequestCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsPost(serviceRequestCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [idList] 
         * @param {number} [typeId] 
         * @param {Array<number>} [typeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {ServiceRequestStatus} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {string} [fullNameContains] 
         * @param {string} [firstNameContains] 
         * @param {string} [firstLastNameContains] 
         * @param {string} [secondNameContains] 
         * @param {string} [secondLastNameContains] 
         * @param {string} [identificationContains] 
         * @param {ServiceRequestClientIdentificationType} [identificationType] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {ServiceRequestEditionModel} [serviceRequestEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsPut(idList?: Array<number>, typeId?: number, typeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: ServiceRequestStatus, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, fullNameContains?: string, firstNameContains?: string, firstLastNameContains?: string, secondNameContains?: string, secondLastNameContains?: string, identificationContains?: string, identificationType?: ServiceRequestClientIdentificationType, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, serviceRequestEditionModel?: ServiceRequestEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsPut(idList, typeId, typeIdList, visibility, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, fullNameContains, firstNameContains, firstLastNameContains, secondNameContains, secondLastNameContains, identificationContains, identificationType, page, items, orderBies, rawIncludes, serviceRequestEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ServiceRequestStatusChangeModel} [serviceRequestStatusChangeModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestsStatusPut(serviceRequestStatusChangeModel?: ServiceRequestStatusChangeModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestsStatusPut(serviceRequestStatusChangeModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceRequestApi - factory interface
 * @export
 */
export const ServiceRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsGet(requestParameters: ServiceRequestApiApiServiceRequestsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestModelPaged> {
            return localVarFp.apiServiceRequestsGet(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsIdDelete(requestParameters: ServiceRequestApiApiServiceRequestsIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiServiceRequestsIdDelete(requestParameters.id, requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsIdGet(requestParameters: ServiceRequestApiApiServiceRequestsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestModel> {
            return localVarFp.apiServiceRequestsIdGet(requestParameters.id, requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsListGet(requestParameters: ServiceRequestApiApiServiceRequestsListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ServiceRequestModel>> {
            return localVarFp.apiServiceRequestsListGet(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsPost(requestParameters: ServiceRequestApiApiServiceRequestsPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestModel> {
            return localVarFp.apiServiceRequestsPost(requestParameters.serviceRequestCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsPut(requestParameters: ServiceRequestApiApiServiceRequestsPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestModel> {
            return localVarFp.apiServiceRequestsPut(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.serviceRequestEditionModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestApiApiServiceRequestsStatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestsStatusPut(requestParameters: ServiceRequestApiApiServiceRequestsStatusPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ErrorResponse> {
            return localVarFp.apiServiceRequestsStatusPut(requestParameters.serviceRequestStatusChangeModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiServiceRequestsGet operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsGetRequest
 */
export interface ServiceRequestApiApiServiceRequestsGetRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly typeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly typeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {ServiceRequestStatus}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly status?: ServiceRequestStatus

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly fullNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly secondNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly secondLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {ServiceRequestClientIdentificationType}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly identificationType?: ServiceRequestClientIdentificationType

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestsIdDelete operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsIdDeleteRequest
 */
export interface ServiceRequestApiApiServiceRequestsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly typeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly typeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {ServiceRequestStatus}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly status?: ServiceRequestStatus

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly fullNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly secondNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly secondLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {ServiceRequestClientIdentificationType}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly identificationType?: ServiceRequestClientIdentificationType

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestsIdGet operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsIdGetRequest
 */
export interface ServiceRequestApiApiServiceRequestsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly id: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly typeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly typeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {ServiceRequestStatus}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly status?: ServiceRequestStatus

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly fullNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly secondNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly secondLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {ServiceRequestClientIdentificationType}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly identificationType?: ServiceRequestClientIdentificationType

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestsListGet operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsListGetRequest
 */
export interface ServiceRequestApiApiServiceRequestsListGetRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly typeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly typeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {ServiceRequestStatus}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly status?: ServiceRequestStatus

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly fullNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly secondNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly secondLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {ServiceRequestClientIdentificationType}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly identificationType?: ServiceRequestClientIdentificationType

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestsPost operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsPostRequest
 */
export interface ServiceRequestApiApiServiceRequestsPostRequest {
    /**
     * 
     * @type {ServiceRequestCreationModel}
     * @memberof ServiceRequestApiApiServiceRequestsPost
     */
    readonly serviceRequestCreationModel?: ServiceRequestCreationModel
}

/**
 * Request parameters for apiServiceRequestsPut operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsPutRequest
 */
export interface ServiceRequestApiApiServiceRequestsPutRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly idList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly typeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly typeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {ServiceRequestStatus}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly status?: ServiceRequestStatus

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly fullNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly firstNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly firstLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly secondNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly secondLastNameContains?: string

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly identificationContains?: string

    /**
     * 
     * @type {ServiceRequestClientIdentificationType}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly identificationType?: ServiceRequestClientIdentificationType

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {ServiceRequestEditionModel}
     * @memberof ServiceRequestApiApiServiceRequestsPut
     */
    readonly serviceRequestEditionModel?: ServiceRequestEditionModel
}

/**
 * Request parameters for apiServiceRequestsStatusPut operation in ServiceRequestApi.
 * @export
 * @interface ServiceRequestApiApiServiceRequestsStatusPutRequest
 */
export interface ServiceRequestApiApiServiceRequestsStatusPutRequest {
    /**
     * 
     * @type {ServiceRequestStatusChangeModel}
     * @memberof ServiceRequestApiApiServiceRequestsStatusPut
     */
    readonly serviceRequestStatusChangeModel?: ServiceRequestStatusChangeModel
}

/**
 * ServiceRequestApi - object-oriented interface
 * @export
 * @class ServiceRequestApi
 * @extends {BaseAPI}
 */
export class ServiceRequestApi extends BaseAPI {
    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsGet(requestParameters: ServiceRequestApiApiServiceRequestsGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsGet(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsIdDelete(requestParameters: ServiceRequestApiApiServiceRequestsIdDeleteRequest, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsIdDelete(requestParameters.id, requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsIdGet(requestParameters: ServiceRequestApiApiServiceRequestsIdGetRequest, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsIdGet(requestParameters.id, requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsListGet(requestParameters: ServiceRequestApiApiServiceRequestsListGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsListGet(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsPost(requestParameters: ServiceRequestApiApiServiceRequestsPostRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsPost(requestParameters.serviceRequestCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsPut(requestParameters: ServiceRequestApiApiServiceRequestsPutRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsPut(requestParameters.idList, requestParameters.typeId, requestParameters.typeIdList, requestParameters.visibility, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.fullNameContains, requestParameters.firstNameContains, requestParameters.firstLastNameContains, requestParameters.secondNameContains, requestParameters.secondLastNameContains, requestParameters.identificationContains, requestParameters.identificationType, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.serviceRequestEditionModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestApiApiServiceRequestsStatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestApi
     */
    public apiServiceRequestsStatusPut(requestParameters: ServiceRequestApiApiServiceRequestsStatusPutRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestApiFp(this.configuration).apiServiceRequestsStatusPut(requestParameters.serviceRequestStatusChangeModel, options).then((request) => request(this.axios, this.basePath));
    }
}
