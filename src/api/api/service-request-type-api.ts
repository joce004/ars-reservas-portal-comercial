/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessServiceRequestTypeVisibility } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { ServiceRequestTypeCreationModel } from '../models';
// @ts-ignore
import { ServiceRequestTypeEditionModel } from '../models';
// @ts-ignore
import { ServiceRequestTypeModel } from '../models';
// @ts-ignore
import { ServiceRequestTypeModelPaged } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * ServiceRequestTypeApi - axios parameter creator
 * @export
 */
export const ServiceRequestTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesGet: async (nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesIdDelete: async (id: number, nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiServiceRequestTypesIdDelete', 'id', id)
            const localVarPath = `/api/ServiceRequest/Types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesIdGet: async (id: number, nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiServiceRequestTypesIdGet', 'id', id)
            const localVarPath = `/api/ServiceRequest/Types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesListGet: async (nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Types/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ServiceRequestTypeCreationModel} [serviceRequestTypeCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesPost: async (serviceRequestTypeCreationModel?: ServiceRequestTypeCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceRequestTypeCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {ServiceRequestTypeEditionModel} [serviceRequestTypeEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesPut: async (nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, serviceRequestTypeEditionModel?: ServiceRequestTypeEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nameContains !== undefined) {
                localVarQueryParameter['NameContains'] = nameContains;
            }

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceRequestTypeEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceRequestTypeApi - functional programming interface
 * @export
 */
export const ServiceRequestTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceRequestTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesGet(nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestTypeModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesGet(nameContains, businessId, businessIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesIdDelete(id: number, nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesIdDelete(id, nameContains, businessId, businessIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesIdGet(id: number, nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesIdGet(id, nameContains, businessId, businessIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesListGet(nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceRequestTypeModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesListGet(nameContains, businessId, businessIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ServiceRequestTypeCreationModel} [serviceRequestTypeCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesPost(serviceRequestTypeCreationModel?: ServiceRequestTypeCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesPost(serviceRequestTypeCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [nameContains] 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {ServiceRequestTypeEditionModel} [serviceRequestTypeEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestTypesPut(nameContains?: string, businessId?: number, businessIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, serviceRequestTypeEditionModel?: ServiceRequestTypeEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestTypesPut(nameContains, businessId, businessIdList, visibility, status, page, items, orderBies, rawIncludes, serviceRequestTypeEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceRequestTypeApi - factory interface
 * @export
 */
export const ServiceRequestTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceRequestTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestTypeModelPaged> {
            return localVarFp.apiServiceRequestTypesGet(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesIdDelete(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiServiceRequestTypesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesIdGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestTypeModel> {
            return localVarFp.apiServiceRequestTypesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesListGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ServiceRequestTypeModel>> {
            return localVarFp.apiServiceRequestTypesListGet(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesPost(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestTypeModel> {
            return localVarFp.apiServiceRequestTypesPost(requestParameters.serviceRequestTypeCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestTypeApiApiServiceRequestTypesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestTypesPut(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestTypeModel> {
            return localVarFp.apiServiceRequestTypesPut(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.serviceRequestTypeEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiServiceRequestTypesGet operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesGetRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestTypesIdDelete operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly nameContains?: string

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestTypesIdGet operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestTypesListGet operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesListGetRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly nameContains?: string

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestTypesPost operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesPostRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesPostRequest {
    /**
     * 
     * @type {ServiceRequestTypeCreationModel}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPost
     */
    readonly serviceRequestTypeCreationModel?: ServiceRequestTypeCreationModel
}

/**
 * Request parameters for apiServiceRequestTypesPut operation in ServiceRequestTypeApi.
 * @export
 * @interface ServiceRequestTypeApiApiServiceRequestTypesPutRequest
 */
export interface ServiceRequestTypeApiApiServiceRequestTypesPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly nameContains?: string

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {ServiceRequestTypeEditionModel}
     * @memberof ServiceRequestTypeApiApiServiceRequestTypesPut
     */
    readonly serviceRequestTypeEditionModel?: ServiceRequestTypeEditionModel
}

/**
 * ServiceRequestTypeApi - object-oriented interface
 * @export
 * @class ServiceRequestTypeApi
 * @extends {BaseAPI}
 */
export class ServiceRequestTypeApi extends BaseAPI {
    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesGet(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesIdDelete(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesIdDeleteRequest, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesIdDelete(requestParameters.id, requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesIdGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesIdGetRequest, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesIdGet(requestParameters.id, requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesListGet(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesListGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesListGet(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesPost(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesPostRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesPost(requestParameters.serviceRequestTypeCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestTypeApiApiServiceRequestTypesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestTypeApi
     */
    public apiServiceRequestTypesPut(requestParameters: ServiceRequestTypeApiApiServiceRequestTypesPutRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestTypeApiFp(this.configuration).apiServiceRequestTypesPut(requestParameters.nameContains, requestParameters.businessId, requestParameters.businessIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.serviceRequestTypeEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
