/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { ServiceRequestInteractionModel } from '../models';
// @ts-ignore
import { ServiceRequestInteractionModelPaged } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * ServiceRequestInteractionApi - axios parameter creator
 * @export
 */
export const ServiceRequestInteractionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsGet: async (businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Interactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsIdGet: async (id: number, businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiServiceRequestInteractionsIdGet', 'id', id)
            const localVarPath = `/api/ServiceRequest/Interactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsListGet: async (businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ServiceRequest/Interactions/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (responsibleUserId !== undefined) {
                localVarQueryParameter['ResponsibleUserId'] = responsibleUserId;
            }

            if (responsibleUserIdList) {
                localVarQueryParameter['ResponsibleUserIdList'] = responsibleUserIdList;
            }

            if (ownerOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['OwnerOfBusinessOwnerId'] = ownerOfBusinessOwnerId;
            }

            if (ownerOfBusinessOwnerIdList) {
                localVarQueryParameter['OwnerOfBusinessOwnerIdList'] = ownerOfBusinessOwnerIdList;
            }

            if (allOfBusinessOwnerId !== undefined) {
                localVarQueryParameter['AllOfBusinessOwnerId'] = allOfBusinessOwnerId;
            }

            if (allOfBusinessOwnerIdList) {
                localVarQueryParameter['AllOfBusinessOwnerIdList'] = allOfBusinessOwnerIdList;
            }

            if (orListBusinessOwnerIdList) {
                localVarQueryParameter['OrList.BusinessOwnerIdList'] = orListBusinessOwnerIdList;
            }

            if (orListResponsibleUserIdList) {
                localVarQueryParameter['OrList.ResponsibleUserIdList'] = orListResponsibleUserIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceRequestInteractionApi - functional programming interface
 * @export
 */
export const ServiceRequestInteractionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceRequestInteractionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestInteractionsGet(businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestInteractionModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestInteractionsGet(businessId, businessIdList, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestInteractionsIdGet(id: number, businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceRequestInteractionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestInteractionsIdGet(id, businessId, businessIdList, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {Status} [status] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [responsibleUserId] 
         * @param {Array<string>} [responsibleUserIdList] 
         * @param {number} [ownerOfBusinessOwnerId] 
         * @param {Array<number>} [ownerOfBusinessOwnerIdList] 
         * @param {number} [allOfBusinessOwnerId] 
         * @param {Array<number>} [allOfBusinessOwnerIdList] 
         * @param {Array<number>} [orListBusinessOwnerIdList] 
         * @param {Array<string>} [orListResponsibleUserIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiServiceRequestInteractionsListGet(businessId?: number, businessIdList?: Array<number>, status?: Status, businessOwnerId?: number, businessOwnerIdList?: Array<number>, responsibleUserId?: string, responsibleUserIdList?: Array<string>, ownerOfBusinessOwnerId?: number, ownerOfBusinessOwnerIdList?: Array<number>, allOfBusinessOwnerId?: number, allOfBusinessOwnerIdList?: Array<number>, orListBusinessOwnerIdList?: Array<number>, orListResponsibleUserIdList?: Array<string>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceRequestInteractionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiServiceRequestInteractionsListGet(businessId, businessIdList, status, businessOwnerId, businessOwnerIdList, responsibleUserId, responsibleUserIdList, ownerOfBusinessOwnerId, ownerOfBusinessOwnerIdList, allOfBusinessOwnerId, allOfBusinessOwnerIdList, orListBusinessOwnerIdList, orListResponsibleUserIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceRequestInteractionApi - factory interface
 * @export
 */
export const ServiceRequestInteractionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceRequestInteractionApiFp(configuration)
    return {
        /**
         * 
         * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestInteractionModelPaged> {
            return localVarFp.apiServiceRequestInteractionsGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsIdGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceRequestInteractionModel> {
            return localVarFp.apiServiceRequestInteractionsIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiServiceRequestInteractionsListGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ServiceRequestInteractionModel>> {
            return localVarFp.apiServiceRequestInteractionsListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiServiceRequestInteractionsGet operation in ServiceRequestInteractionApi.
 * @export
 * @interface ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest
 */
export interface ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestInteractionsIdGet operation in ServiceRequestInteractionApi.
 * @export
 * @interface ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest
 */
export interface ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiServiceRequestInteractionsListGet operation in ServiceRequestInteractionApi.
 * @export
 * @interface ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest
 */
export interface ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {Status}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly responsibleUserId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly responsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly ownerOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly ownerOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly allOfBusinessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly allOfBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly orListBusinessOwnerIdList?: Array<number>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly orListResponsibleUserIdList?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceRequestInteractionApiApiServiceRequestInteractionsListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * ServiceRequestInteractionApi - object-oriented interface
 * @export
 * @class ServiceRequestInteractionApi
 * @extends {BaseAPI}
 */
export class ServiceRequestInteractionApi extends BaseAPI {
    /**
     * 
     * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestInteractionApi
     */
    public apiServiceRequestInteractionsGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestInteractionApiFp(this.configuration).apiServiceRequestInteractionsGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestInteractionApi
     */
    public apiServiceRequestInteractionsIdGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsIdGetRequest, options?: AxiosRequestConfig) {
        return ServiceRequestInteractionApiFp(this.configuration).apiServiceRequestInteractionsIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceRequestInteractionApi
     */
    public apiServiceRequestInteractionsListGet(requestParameters: ServiceRequestInteractionApiApiServiceRequestInteractionsListGetRequest = {}, options?: AxiosRequestConfig) {
        return ServiceRequestInteractionApiFp(this.configuration).apiServiceRequestInteractionsListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.responsibleUserId, requestParameters.responsibleUserIdList, requestParameters.ownerOfBusinessOwnerId, requestParameters.ownerOfBusinessOwnerIdList, requestParameters.allOfBusinessOwnerId, requestParameters.allOfBusinessOwnerIdList, requestParameters.orListBusinessOwnerIdList, requestParameters.orListResponsibleUserIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }
}
