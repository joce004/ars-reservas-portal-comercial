/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { UserTokenCreationModel } from '../models';
// @ts-ignore
import { UserTokenEditionModel } from '../models';
// @ts-ignore
import { UserTokenModel } from '../models';
// @ts-ignore
import { UserTokenModelPaged } from '../models';
// @ts-ignore
import { UserTokenStatus } from '../models';
/**
 * UserTokenApi - axios parameter creator
 * @export
 */
export const UserTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensGet: async (businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Security/Tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensIdDelete: async (id: number, businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSecurityTokensIdDelete', 'id', id)
            const localVarPath = `/api/Security/Tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensIdGet: async (id: number, businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSecurityTokensIdGet', 'id', id)
            const localVarPath = `/api/Security/Tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensListGet: async (businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Security/Tokens/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserTokenCreationModel} [userTokenCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensPost: async (userTokenCreationModel?: UserTokenCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Security/Tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTokenCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {UserTokenEditionModel} [userTokenEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensPut: async (businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, userTokenEditionModel?: UserTokenEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Security/Tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTokenEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTokenApi - functional programming interface
 * @export
 */
export const UserTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensGet(businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensGet(businessId, businessIdList, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensIdDelete(id: number, businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensIdDelete(id, businessId, businessIdList, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensIdGet(id: number, businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensIdGet(id, businessId, businessIdList, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensListGet(businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTokenModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensListGet(businessId, businessIdList, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserTokenCreationModel} [userTokenCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensPost(userTokenCreationModel?: UserTokenCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensPost(userTokenCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {UserTokenStatus} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {UserTokenEditionModel} [userTokenEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSecurityTokensPut(businessId?: number, businessIdList?: Array<number>, status?: UserTokenStatus, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, userTokenEditionModel?: UserTokenEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSecurityTokensPut(businessId, businessIdList, status, page, items, orderBies, rawIncludes, userTokenEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserTokenApi - factory interface
 * @export
 */
export const UserTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTokenApiFp(configuration)
    return {
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensGet(requestParameters: UserTokenApiApiSecurityTokensGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserTokenModelPaged> {
            return localVarFp.apiSecurityTokensGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensIdDelete(requestParameters: UserTokenApiApiSecurityTokensIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSecurityTokensIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensIdGet(requestParameters: UserTokenApiApiSecurityTokensIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UserTokenModel> {
            return localVarFp.apiSecurityTokensIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensListGet(requestParameters: UserTokenApiApiSecurityTokensListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<UserTokenModel>> {
            return localVarFp.apiSecurityTokensListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensPost(requestParameters: UserTokenApiApiSecurityTokensPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserTokenModel> {
            return localVarFp.apiSecurityTokensPost(requestParameters.userTokenCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTokenApiApiSecurityTokensPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSecurityTokensPut(requestParameters: UserTokenApiApiSecurityTokensPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserTokenModel> {
            return localVarFp.apiSecurityTokensPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.userTokenEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSecurityTokensGet operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensGetRequest
 */
export interface UserTokenApiApiSecurityTokensGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserTokenStatus}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly status?: UserTokenStatus

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserTokenApiApiSecurityTokensGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiSecurityTokensIdDelete operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensIdDeleteRequest
 */
export interface UserTokenApiApiSecurityTokensIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserTokenStatus}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly status?: UserTokenStatus

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserTokenApiApiSecurityTokensIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiSecurityTokensIdGet operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensIdGetRequest
 */
export interface UserTokenApiApiSecurityTokensIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserTokenStatus}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly status?: UserTokenStatus

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserTokenApiApiSecurityTokensIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiSecurityTokensListGet operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensListGetRequest
 */
export interface UserTokenApiApiSecurityTokensListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserTokenStatus}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly status?: UserTokenStatus

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserTokenApiApiSecurityTokensListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiSecurityTokensPost operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensPostRequest
 */
export interface UserTokenApiApiSecurityTokensPostRequest {
    /**
     * 
     * @type {UserTokenCreationModel}
     * @memberof UserTokenApiApiSecurityTokensPost
     */
    readonly userTokenCreationModel?: UserTokenCreationModel
}

/**
 * Request parameters for apiSecurityTokensPut operation in UserTokenApi.
 * @export
 * @interface UserTokenApiApiSecurityTokensPutRequest
 */
export interface UserTokenApiApiSecurityTokensPutRequest {
    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {UserTokenStatus}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly status?: UserTokenStatus

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {UserTokenEditionModel}
     * @memberof UserTokenApiApiSecurityTokensPut
     */
    readonly userTokenEditionModel?: UserTokenEditionModel
}

/**
 * UserTokenApi - object-oriented interface
 * @export
 * @class UserTokenApi
 * @extends {BaseAPI}
 */
export class UserTokenApi extends BaseAPI {
    /**
     * 
     * @param {UserTokenApiApiSecurityTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensGet(requestParameters: UserTokenApiApiSecurityTokensGetRequest = {}, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTokenApiApiSecurityTokensIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensIdDelete(requestParameters: UserTokenApiApiSecurityTokensIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTokenApiApiSecurityTokensIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensIdGet(requestParameters: UserTokenApiApiSecurityTokensIdGetRequest, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTokenApiApiSecurityTokensListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensListGet(requestParameters: UserTokenApiApiSecurityTokensListGetRequest = {}, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTokenApiApiSecurityTokensPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensPost(requestParameters: UserTokenApiApiSecurityTokensPostRequest = {}, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensPost(requestParameters.userTokenCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTokenApiApiSecurityTokensPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    public apiSecurityTokensPut(requestParameters: UserTokenApiApiSecurityTokensPutRequest = {}, options?: AxiosRequestConfig) {
        return UserTokenApiFp(this.configuration).apiSecurityTokensPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.userTokenEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
