/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AvailableProductsResponseModel } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { FileResultModel } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { QuoteProductsBaseRequestModel } from '../models';
// @ts-ignore
import { QuoteProductsDataModel } from '../models';
// @ts-ignore
import { QuoteProductsRequestModel } from '../models';
// @ts-ignore
import { QuoteProductsResponseModel } from '../models';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAvailablesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Products/Availables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuoteProductsBaseRequestModel} [quoteProductsBaseRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuoteDataPost: async (quoteProductsBaseRequestModel?: QuoteProductsBaseRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Products/QuoteData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteProductsBaseRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} [returnFile] 
         * @param {boolean} [recalculate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuoteIdReportPost: async (id: number, returnFile?: boolean, recalculate?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProductsQuoteIdReportPost', 'id', id)
            const localVarPath = `/api/Products/Quote/{id}/Report`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (returnFile !== undefined) {
                localVarQueryParameter['returnFile'] = returnFile;
            }

            if (recalculate !== undefined) {
                localVarQueryParameter['recalculate'] = recalculate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuoteProductsRequestModel} [quoteProductsRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuotePost: async (quoteProductsRequestModel?: QuoteProductsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Products/Quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteProductsRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsAvailablesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableProductsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsAvailablesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {QuoteProductsBaseRequestModel} [quoteProductsBaseRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsQuoteDataPost(quoteProductsBaseRequestModel?: QuoteProductsBaseRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteProductsDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsQuoteDataPost(quoteProductsBaseRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {boolean} [returnFile] 
         * @param {boolean} [recalculate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsQuoteIdReportPost(id: number, returnFile?: boolean, recalculate?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileResultModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsQuoteIdReportPost(id, returnFile, recalculate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {QuoteProductsRequestModel} [quoteProductsRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsQuotePost(quoteProductsRequestModel?: QuoteProductsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteProductsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsQuotePost(quoteProductsRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAvailablesGet(options?: AxiosRequestConfig): AxiosPromise<AvailableProductsResponseModel> {
            return localVarFp.apiProductsAvailablesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiApiProductsQuoteDataPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuoteDataPost(requestParameters: ProductApiApiProductsQuoteDataPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QuoteProductsDataModel> {
            return localVarFp.apiProductsQuoteDataPost(requestParameters.quoteProductsBaseRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiApiProductsQuoteIdReportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuoteIdReportPost(requestParameters: ProductApiApiProductsQuoteIdReportPostRequest, options?: AxiosRequestConfig): AxiosPromise<FileResultModel> {
            return localVarFp.apiProductsQuoteIdReportPost(requestParameters.id, requestParameters.returnFile, requestParameters.recalculate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductApiApiProductsQuotePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsQuotePost(requestParameters: ProductApiApiProductsQuotePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QuoteProductsResponseModel> {
            return localVarFp.apiProductsQuotePost(requestParameters.quoteProductsRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProductsQuoteDataPost operation in ProductApi.
 * @export
 * @interface ProductApiApiProductsQuoteDataPostRequest
 */
export interface ProductApiApiProductsQuoteDataPostRequest {
    /**
     * 
     * @type {QuoteProductsBaseRequestModel}
     * @memberof ProductApiApiProductsQuoteDataPost
     */
    readonly quoteProductsBaseRequestModel?: QuoteProductsBaseRequestModel
}

/**
 * Request parameters for apiProductsQuoteIdReportPost operation in ProductApi.
 * @export
 * @interface ProductApiApiProductsQuoteIdReportPostRequest
 */
export interface ProductApiApiProductsQuoteIdReportPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductApiApiProductsQuoteIdReportPost
     */
    readonly id: number

    /**
     * 
     * @type {boolean}
     * @memberof ProductApiApiProductsQuoteIdReportPost
     */
    readonly returnFile?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ProductApiApiProductsQuoteIdReportPost
     */
    readonly recalculate?: boolean
}

/**
 * Request parameters for apiProductsQuotePost operation in ProductApi.
 * @export
 * @interface ProductApiApiProductsQuotePostRequest
 */
export interface ProductApiApiProductsQuotePostRequest {
    /**
     * 
     * @type {QuoteProductsRequestModel}
     * @memberof ProductApiApiProductsQuotePost
     */
    readonly quoteProductsRequestModel?: QuoteProductsRequestModel
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductsAvailablesGet(options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductsAvailablesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiApiProductsQuoteDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductsQuoteDataPost(requestParameters: ProductApiApiProductsQuoteDataPostRequest = {}, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductsQuoteDataPost(requestParameters.quoteProductsBaseRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiApiProductsQuoteIdReportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductsQuoteIdReportPost(requestParameters: ProductApiApiProductsQuoteIdReportPostRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductsQuoteIdReportPost(requestParameters.id, requestParameters.returnFile, requestParameters.recalculate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductApiApiProductsQuotePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductsQuotePost(requestParameters: ProductApiApiProductsQuotePostRequest = {}, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductsQuotePost(requestParameters.quoteProductsRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}
