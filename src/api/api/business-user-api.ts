/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessUserCreationModel } from '../models';
// @ts-ignore
import { BusinessUserEditionModel } from '../models';
// @ts-ignore
import { BusinessUserModel } from '../models';
// @ts-ignore
import { BusinessUserModelPaged } from '../models';
// @ts-ignore
import { BusinessUserType } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { UserType } from '../models';
/**
 * BusinessUserApi - axios parameter creator
 * @export
 */
export const BusinessUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersGet: async (businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }

            if (userType !== undefined) {
                localVarQueryParameter['UserType'] = userType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['TypeCode'] = typeCode;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersIdDelete: async (id: number, businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesUsersIdDelete', 'id', id)
            const localVarPath = `/api/Businesses/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }

            if (userType !== undefined) {
                localVarQueryParameter['UserType'] = userType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['TypeCode'] = typeCode;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersIdGet: async (id: number, businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesUsersIdGet', 'id', id)
            const localVarPath = `/api/Businesses/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }

            if (userType !== undefined) {
                localVarQueryParameter['UserType'] = userType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['TypeCode'] = typeCode;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersListGet: async (businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/Users/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }

            if (userType !== undefined) {
                localVarQueryParameter['UserType'] = userType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['TypeCode'] = typeCode;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BusinessUserCreationModel} [businessUserCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersPost: async (businessUserCreationModel?: BusinessUserCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessUserCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessUserEditionModel} [businessUserEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersPut: async (businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessUserEditionModel?: BusinessUserEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (businessOwnerId !== undefined) {
                localVarQueryParameter['BusinessOwnerId'] = businessOwnerId;
            }

            if (businessOwnerIdList) {
                localVarQueryParameter['BusinessOwnerIdList'] = businessOwnerIdList;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userIdList) {
                localVarQueryParameter['UserIdList'] = userIdList;
            }

            if (userType !== undefined) {
                localVarQueryParameter['UserType'] = userType;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (typeCode !== undefined) {
                localVarQueryParameter['TypeCode'] = typeCode;
            }

            if (businessOrOwnerId !== undefined) {
                localVarQueryParameter['BusinessOrOwnerId'] = businessOrOwnerId;
            }

            if (businessOrOwnerIdList) {
                localVarQueryParameter['BusinessOrOwnerIdList'] = businessOrOwnerIdList;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessUserEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessUserApi - functional programming interface
 * @export
 */
export const BusinessUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersGet(businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUserModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersGet(businessId, businessIdList, businessOwnerId, businessOwnerIdList, userId, userIdList, userType, status, type, typeCode, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersIdDelete(id: number, businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersIdDelete(id, businessId, businessIdList, businessOwnerId, businessOwnerIdList, userId, userIdList, userType, status, type, typeCode, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersIdGet(id: number, businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersIdGet(id, businessId, businessIdList, businessOwnerId, businessOwnerIdList, userId, userIdList, userType, status, type, typeCode, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersListGet(businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessUserModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersListGet(businessId, businessIdList, businessOwnerId, businessOwnerIdList, userId, userIdList, userType, status, type, typeCode, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BusinessUserCreationModel} [businessUserCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersPost(businessUserCreationModel?: BusinessUserCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersPost(businessUserCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [businessOwnerId] 
         * @param {Array<number>} [businessOwnerIdList] 
         * @param {string} [userId] 
         * @param {Array<string>} [userIdList] 
         * @param {UserType} [userType] 
         * @param {Status} [status] 
         * @param {BusinessUserType} [type] 
         * @param {string} [typeCode] 
         * @param {number} [businessOrOwnerId] 
         * @param {Array<number>} [businessOrOwnerIdList] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessUserEditionModel} [businessUserEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesUsersPut(businessId?: number, businessIdList?: Array<number>, businessOwnerId?: number, businessOwnerIdList?: Array<number>, userId?: string, userIdList?: Array<string>, userType?: UserType, status?: Status, type?: BusinessUserType, typeCode?: string, businessOrOwnerId?: number, businessOrOwnerIdList?: Array<number>, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessUserEditionModel?: BusinessUserEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesUsersPut(businessId, businessIdList, businessOwnerId, businessOwnerIdList, userId, userIdList, userType, status, type, typeCode, businessOrOwnerId, businessOrOwnerIdList, page, items, orderBies, rawIncludes, businessUserEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessUserApi - factory interface
 * @export
 */
export const BusinessUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessUserApiFp(configuration)
    return {
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersGet(requestParameters: BusinessUserApiApiBusinessesUsersGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessUserModelPaged> {
            return localVarFp.apiBusinessesUsersGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersIdDelete(requestParameters: BusinessUserApiApiBusinessesUsersIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBusinessesUsersIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersIdGet(requestParameters: BusinessUserApiApiBusinessesUsersIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessUserModel> {
            return localVarFp.apiBusinessesUsersIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersListGet(requestParameters: BusinessUserApiApiBusinessesUsersListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<BusinessUserModel>> {
            return localVarFp.apiBusinessesUsersListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersPost(requestParameters: BusinessUserApiApiBusinessesUsersPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessUserModel> {
            return localVarFp.apiBusinessesUsersPost(requestParameters.businessUserCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessUserApiApiBusinessesUsersPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesUsersPut(requestParameters: BusinessUserApiApiBusinessesUsersPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessUserModel> {
            return localVarFp.apiBusinessesUsersPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessUserEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBusinessesUsersGet operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersGetRequest
 */
export interface BusinessUserApiApiBusinessesUsersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly userId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly userIdList?: Array<string>

    /**
     * 
     * @type {UserType}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly userType?: UserType

    /**
     * 
     * @type {Status}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly status?: Status

    /**
     * 
     * @type {BusinessUserType}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly type?: BusinessUserType

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly typeCode?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesUsersIdDelete operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersIdDeleteRequest
 */
export interface BusinessUserApiApiBusinessesUsersIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly userId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly userIdList?: Array<string>

    /**
     * 
     * @type {UserType}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly userType?: UserType

    /**
     * 
     * @type {Status}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {BusinessUserType}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly type?: BusinessUserType

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly typeCode?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesUsersIdGet operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersIdGetRequest
 */
export interface BusinessUserApiApiBusinessesUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly userId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly userIdList?: Array<string>

    /**
     * 
     * @type {UserType}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly userType?: UserType

    /**
     * 
     * @type {Status}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {BusinessUserType}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly type?: BusinessUserType

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly typeCode?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesUsersListGet operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersListGetRequest
 */
export interface BusinessUserApiApiBusinessesUsersListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly userId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly userIdList?: Array<string>

    /**
     * 
     * @type {UserType}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly userType?: UserType

    /**
     * 
     * @type {Status}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {BusinessUserType}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly type?: BusinessUserType

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly typeCode?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesUsersPost operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersPostRequest
 */
export interface BusinessUserApiApiBusinessesUsersPostRequest {
    /**
     * 
     * @type {BusinessUserCreationModel}
     * @memberof BusinessUserApiApiBusinessesUsersPost
     */
    readonly businessUserCreationModel?: BusinessUserCreationModel
}

/**
 * Request parameters for apiBusinessesUsersPut operation in BusinessUserApi.
 * @export
 * @interface BusinessUserApiApiBusinessesUsersPutRequest
 */
export interface BusinessUserApiApiBusinessesUsersPutRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessOwnerIdList?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly userId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly userIdList?: Array<string>

    /**
     * 
     * @type {UserType}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly userType?: UserType

    /**
     * 
     * @type {Status}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly status?: Status

    /**
     * 
     * @type {BusinessUserType}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly type?: BusinessUserType

    /**
     * 
     * @type {string}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly typeCode?: string

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessOrOwnerId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessOrOwnerIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {BusinessUserEditionModel}
     * @memberof BusinessUserApiApiBusinessesUsersPut
     */
    readonly businessUserEditionModel?: BusinessUserEditionModel
}

/**
 * BusinessUserApi - object-oriented interface
 * @export
 * @class BusinessUserApi
 * @extends {BaseAPI}
 */
export class BusinessUserApi extends BaseAPI {
    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersGet(requestParameters: BusinessUserApiApiBusinessesUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersIdDelete(requestParameters: BusinessUserApiApiBusinessesUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersIdGet(requestParameters: BusinessUserApiApiBusinessesUsersIdGetRequest, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersListGet(requestParameters: BusinessUserApiApiBusinessesUsersListGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersPost(requestParameters: BusinessUserApiApiBusinessesUsersPostRequest = {}, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersPost(requestParameters.businessUserCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessUserApiApiBusinessesUsersPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUserApi
     */
    public apiBusinessesUsersPut(requestParameters: BusinessUserApiApiBusinessesUsersPutRequest = {}, options?: AxiosRequestConfig) {
        return BusinessUserApiFp(this.configuration).apiBusinessesUsersPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.businessOwnerId, requestParameters.businessOwnerIdList, requestParameters.userId, requestParameters.userIdList, requestParameters.userType, requestParameters.status, requestParameters.type, requestParameters.typeCode, requestParameters.businessOrOwnerId, requestParameters.businessOrOwnerIdList, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessUserEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
