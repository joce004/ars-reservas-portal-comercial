/* tslint:disable */
/* eslint-disable */
/**
 * Argento Oficina Virtual
 * Api para Portal de Clientes Argento
 *
 * The version of the OpenAPI document: 0.10.2
 * Contact: info@mts.com.do
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessServiceRequestTypeCreationModel } from '../models';
// @ts-ignore
import { BusinessServiceRequestTypeEditionModel } from '../models';
// @ts-ignore
import { BusinessServiceRequestTypeModel } from '../models';
// @ts-ignore
import { BusinessServiceRequestTypeModelPaged } from '../models';
// @ts-ignore
import { BusinessServiceRequestTypeVisibility } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrderBy } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { Status } from '../models';
/**
 * BusinessServiceRequestTypeApi - axios parameter creator
 * @export
 */
export const BusinessServiceRequestTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesGet: async (businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/ServiceRequestTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (requestTypeId !== undefined) {
                localVarQueryParameter['RequestTypeId'] = requestTypeId;
            }

            if (requestTypeIdList) {
                localVarQueryParameter['RequestTypeIdList'] = requestTypeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesIdDelete: async (id: number, businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesServiceRequestTypesIdDelete', 'id', id)
            const localVarPath = `/api/Businesses/ServiceRequestTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (requestTypeId !== undefined) {
                localVarQueryParameter['RequestTypeId'] = requestTypeId;
            }

            if (requestTypeIdList) {
                localVarQueryParameter['RequestTypeIdList'] = requestTypeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesIdGet: async (id: number, businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBusinessesServiceRequestTypesIdGet', 'id', id)
            const localVarPath = `/api/Businesses/ServiceRequestTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (requestTypeId !== undefined) {
                localVarQueryParameter['RequestTypeId'] = requestTypeId;
            }

            if (requestTypeIdList) {
                localVarQueryParameter['RequestTypeIdList'] = requestTypeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesListGet: async (businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/ServiceRequestTypes/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (requestTypeId !== undefined) {
                localVarQueryParameter['RequestTypeId'] = requestTypeId;
            }

            if (requestTypeIdList) {
                localVarQueryParameter['RequestTypeIdList'] = requestTypeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeCreationModel} [businessServiceRequestTypeCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesPost: async (businessServiceRequestTypeCreationModel?: BusinessServiceRequestTypeCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/ServiceRequestTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessServiceRequestTypeCreationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessServiceRequestTypeEditionModel} [businessServiceRequestTypeEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesPut: async (businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessServiceRequestTypeEditionModel?: BusinessServiceRequestTypeEditionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Businesses/ServiceRequestTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['BusinessId'] = businessId;
            }

            if (businessIdList) {
                localVarQueryParameter['BusinessIdList'] = businessIdList;
            }

            if (requestTypeId !== undefined) {
                localVarQueryParameter['RequestTypeId'] = requestTypeId;
            }

            if (requestTypeIdList) {
                localVarQueryParameter['RequestTypeIdList'] = requestTypeIdList;
            }

            if (visibility !== undefined) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (items !== undefined) {
                localVarQueryParameter['Items'] = items;
            }

            if (orderBies) {
                localVarQueryParameter['OrderBies'] = orderBies;
            }

            if (rawIncludes) {
                localVarQueryParameter['RawIncludes'] = rawIncludes;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(businessServiceRequestTypeEditionModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessServiceRequestTypeApi - functional programming interface
 * @export
 */
export const BusinessServiceRequestTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessServiceRequestTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesGet(businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessServiceRequestTypeModelPaged>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesGet(businessId, businessIdList, requestTypeId, requestTypeIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesIdDelete(id: number, businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesIdDelete(id, businessId, businessIdList, requestTypeId, requestTypeIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesIdGet(id: number, businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesIdGet(id, businessId, businessIdList, requestTypeId, requestTypeIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesListGet(businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessServiceRequestTypeModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesListGet(businessId, businessIdList, requestTypeId, requestTypeIdList, visibility, status, page, items, orderBies, rawIncludes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeCreationModel} [businessServiceRequestTypeCreationModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesPost(businessServiceRequestTypeCreationModel?: BusinessServiceRequestTypeCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesPost(businessServiceRequestTypeCreationModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [businessId] 
         * @param {Array<number>} [businessIdList] 
         * @param {number} [requestTypeId] 
         * @param {Array<number>} [requestTypeIdList] 
         * @param {BusinessServiceRequestTypeVisibility} [visibility] 
         * @param {Status} [status] 
         * @param {number} [page] 
         * @param {number} [items] 
         * @param {Array<OrderBy>} [orderBies] 
         * @param {Array<string>} [rawIncludes] 
         * @param {BusinessServiceRequestTypeEditionModel} [businessServiceRequestTypeEditionModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBusinessesServiceRequestTypesPut(businessId?: number, businessIdList?: Array<number>, requestTypeId?: number, requestTypeIdList?: Array<number>, visibility?: BusinessServiceRequestTypeVisibility, status?: Status, page?: number, items?: number, orderBies?: Array<OrderBy>, rawIncludes?: Array<string>, businessServiceRequestTypeEditionModel?: BusinessServiceRequestTypeEditionModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessServiceRequestTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBusinessesServiceRequestTypesPut(businessId, businessIdList, requestTypeId, requestTypeIdList, visibility, status, page, items, orderBies, rawIncludes, businessServiceRequestTypeEditionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessServiceRequestTypeApi - factory interface
 * @export
 */
export const BusinessServiceRequestTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessServiceRequestTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessServiceRequestTypeModelPaged> {
            return localVarFp.apiBusinessesServiceRequestTypesGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesIdDelete(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBusinessesServiceRequestTypesIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesIdGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessServiceRequestTypeModel> {
            return localVarFp.apiBusinessesServiceRequestTypesIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesListGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<BusinessServiceRequestTypeModel>> {
            return localVarFp.apiBusinessesServiceRequestTypesListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesPost(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessServiceRequestTypeModel> {
            return localVarFp.apiBusinessesServiceRequestTypesPost(requestParameters.businessServiceRequestTypeCreationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBusinessesServiceRequestTypesPut(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessServiceRequestTypeModel> {
            return localVarFp.apiBusinessesServiceRequestTypesPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessServiceRequestTypeEditionModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBusinessesServiceRequestTypesGet operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly requestTypeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly requestTypeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesServiceRequestTypesIdDelete operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly requestTypeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly requestTypeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDelete
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesServiceRequestTypesIdGet operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly requestTypeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly requestTypeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesServiceRequestTypesListGet operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly requestTypeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly requestTypeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGet
     */
    readonly rawIncludes?: Array<string>
}

/**
 * Request parameters for apiBusinessesServiceRequestTypesPost operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest {
    /**
     * 
     * @type {BusinessServiceRequestTypeCreationModel}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPost
     */
    readonly businessServiceRequestTypeCreationModel?: BusinessServiceRequestTypeCreationModel
}

/**
 * Request parameters for apiBusinessesServiceRequestTypesPut operation in BusinessServiceRequestTypeApi.
 * @export
 * @interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest
 */
export interface BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly businessId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly businessIdList?: Array<number>

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly requestTypeId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly requestTypeIdList?: Array<number>

    /**
     * 
     * @type {BusinessServiceRequestTypeVisibility}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly visibility?: BusinessServiceRequestTypeVisibility

    /**
     * 
     * @type {Status}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly status?: Status

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly items?: number

    /**
     * 
     * @type {Array<OrderBy>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly orderBies?: Array<OrderBy>

    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly rawIncludes?: Array<string>

    /**
     * 
     * @type {BusinessServiceRequestTypeEditionModel}
     * @memberof BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPut
     */
    readonly businessServiceRequestTypeEditionModel?: BusinessServiceRequestTypeEditionModel
}

/**
 * BusinessServiceRequestTypeApi - object-oriented interface
 * @export
 * @class BusinessServiceRequestTypeApi
 * @extends {BaseAPI}
 */
export class BusinessServiceRequestTypeApi extends BaseAPI {
    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesIdDelete(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdDeleteRequest, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesIdDelete(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesIdGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesIdGetRequest, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesIdGet(requestParameters.id, requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesListGet(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesListGetRequest = {}, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesListGet(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesPost(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPostRequest = {}, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesPost(requestParameters.businessServiceRequestTypeCreationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessServiceRequestTypeApi
     */
    public apiBusinessesServiceRequestTypesPut(requestParameters: BusinessServiceRequestTypeApiApiBusinessesServiceRequestTypesPutRequest = {}, options?: AxiosRequestConfig) {
        return BusinessServiceRequestTypeApiFp(this.configuration).apiBusinessesServiceRequestTypesPut(requestParameters.businessId, requestParameters.businessIdList, requestParameters.requestTypeId, requestParameters.requestTypeIdList, requestParameters.visibility, requestParameters.status, requestParameters.page, requestParameters.items, requestParameters.orderBies, requestParameters.rawIncludes, requestParameters.businessServiceRequestTypeEditionModel, options).then((request) => request(this.axios, this.basePath));
    }
}
